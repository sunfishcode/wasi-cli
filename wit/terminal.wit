/// Support for terminal input.
///
/// See the comments on the terminal-output interface for more background
/// on terminal support.
interface terminal-input {
    /// The input side of a terminal.
    ///
    /// Implementations are encouraged to reset terminals to default settings
    /// when terminal resources are dropped.
    ///
    /// The full feature is not yet fully defined, however implementations
    /// are encouraged to emit the following control codes and input sequences:
    ///
    /// Control codes:
    ///
    /// | Code | Meaning                                                      |
    /// | -----| ------------------------------------------------------------ |
    /// | U+8  | Ctrl-H; despite U+8 being historically called "backspace" in ASCII, this isn't the backspace key |
    /// | U+9  | Tab                                                          |
    /// | U+A  | Enter                                                        |
    /// | U+C  | Ctrl-L, in immediate mode, requests applications refresh the screen |
    /// | U+1B | Escape                                                       |
    /// | U+7F | Backspace; this is the backspace key                         |
    ///
    /// Escape sequences:
    ///
    /// | Sequence     | Meaning                                              |
    /// | ------------ | ---------------------------------------------------- |
    /// | `␛[A`        | Up                                                   |
    /// | `␛[B`        | Down                                                 |
    /// | `␛[C`        | Right                                                |
    /// | `␛[D`        | Left                                                 |
    /// | `␛[F`        | End                                                  |
    /// | `␛[H`        | Home                                                 |
    /// | `␛[2~`       | Insert                                               |
    /// | `␛[3~`       | Delete                                               |
    /// | `␛[5~`       | Page Up                                              |
    /// | `␛[6~`       | Page Down                                            |
    /// | `␛OP`        | F1                                                   |
    /// | `␛OQ`        | F2                                                   |
    /// | `␛OR`        | F3                                                   |
    /// | `␛OS`        | F4                                                   |
    /// | `␛[15~`      | F5                                                   |
    /// | `␛[17~`      | F6                                                   |
    /// | `␛[18~`      | F7                                                   |
    /// | `␛[19~`      | F8                                                   |
    /// | `␛[20~`      | F9                                                   |
    /// | `␛[21~`      | F10                                                  |
    /// | `␛[23~`      | F11                                                  |
    /// | `␛[24~`      | F12                                                  |
    /// | `␛[200~`     | Begin Paste; only emitted when bracketed paste mode is activated |
    /// | `␛[201~`     | End Paste; only emitted when bracketed paste mode is activated |
    resource terminal-input {
        /// Enable or disable *immediate* mode.
        ///
        /// Immediate mode makes input key sequences available to be read on
        /// the input stream immediately, rather than buffering them up
        /// until the end of the line is seen.
        ///
        /// This may fail if the implementation doesn't support immediate mode.
        set-immediate: func(mode: bool) -> result

        /// Disable or enable *echo* mode.
        ///
        /// Echo mode retransmits input key sequences back to the output of the
        /// terminal, so that users can see what they're typing. Echoing is the
        /// default behavior in terminals, but disabling can be useful for
        /// entering passwords or for combining with immediate mode to make
        /// interactive terminal interfaces.
        ///
        /// This may fail if the implementation doesn't support echo mode.
        set-echo: func(mode: bool) -> result
    }
}

/// Support for terminal output.
///
/// This includes support for a basic terminal interactions, including
/// functions for getting and setting basic "termios" terminal attributes, and
/// support for control codes and "ANSI" escape sequences.
///
/// The "ANSI" here refers to ANSI X3.64, which later became ECMA-48
/// (ISO/IEC 6429). However, ECMA-48 was last updated in 1991, it has many
/// features which are no longer relevant, it has no awareness of Unicode
/// or UTF-8, it leaves many behaviors implementation-dependent, and it lacks
/// many extensions that modern implementations have added and have become
/// popular in modern use cases. So while this "ANSI" is the original source
/// for a lot of the terminology used, it's not a normative reference.
///
/// For now, out of practicality, this document starts by describing features
/// which are widely supported and widely used in modern implementations and
/// use cases. Over time, this could grow to become more complete.
interface terminal-output {
    use wasi:poll/poll.{pollable}

    /// The output side of a terminal.
    ///
    /// Terminal feature sets and behavior vary between implementations, and
    /// this specification does not yet describe a specific set of escape
    /// sequences or semantics, so applications are encouraged to stick to
    /// widely-supported features.
    ///
    /// Implementations are encouraged to reset terminals to default settings
    /// when terminal resources are dropped, or before writing log messages or
    /// other output to the terminal, to prevent applications from modifying
    /// the appearance of or reading unrelated output.
    ///
    /// Terminal emulators are encouraged to:
    ///  - avoid interpreting escape sequences which cause writes to files,
    ///    cause pre-existing terminal contents to be echoed back to the
    ///    application, or disconnect the terminal,
    ///  - give a visual indication, such as a terminal window title change,
    ///    when entering and exiting full-screen mode,
    ///  - support UTF-8,
    ///  - recognize '␛\' as a ST (String Terminator) sequence,
    ///  - emit `␛OP`, `␛OQ`, `␛OR`, and `␛OS` for F1-F4 keypresses, and
    ///  - avoid interpreting the 8-bit encodings of the C1 control codes.
    resource terminal-output {
        /// Return the current number of rows and columns in the terminal.
        ///
        /// Not all terminals have a set size, and not all that do know their
        /// size, so this function may fail the size cannot be determined.
        window-size: func() -> result<rows-and-columns>

        /// Return the current number of columns in the terminal.
        ///
        /// Not all terminals have a set size, and not all that do know their
        /// size, so this function may fail if the size cannot be determined.
        window-columns: func() -> result<u16>

        /// Return a `pollable` listening for window size changes.
        ///
        /// This `pollable` can be used with `poll_oneoff` to listen for
        /// changes to the window size. On implementations which don't
        /// support size changes, they just never happen.
        subscribe-to-size-changes: func() -> pollable

        /// What kinds of colors are supported, and preferred?
        ///
        /// This returns a set of flags indicating which families of
        /// escape sequences for displaying color are supported.
        ///
        /// Some terminals support "OSC 4" as a way to detect color support,
        /// however this API is preferred.
        color: func() -> color-flags

        /// Does this terminal support line-editing features?
        ///
        /// These include the control codes and escape sequences for moving
        /// the cursor around the current line, clearing all or part of the
        /// current line, as well as the "alert" code (U+7) which should
        /// produce an acoustic or visual notification. This reflects the
        /// functionality commonly used for command-line prompts.
        ///
        /// The full feature is not yet fully defined, however implementations
        /// advertising line-editing support are encouraged to support the
        /// following control codes and escape sequences:
        ///
        /// Control codes:
        ///
        /// | Code | Meaning                                                  |
        /// | ---- | -------------------------------------------------------- |
        /// | U+7  | Alert                                                    |
        /// | U+8  | Move cursor back one column                              |
        /// | U+9  | Tab                                                      |
        /// | U+A  | End of line                                              |
        /// | U+C  | FF Terminal Compatibility                                |
        /// | U+D  | Carriage Return                                          |
        /// | U+7F | No Effect                                                |
        ///
        /// Escape sequences:
        ///
        /// | Sequence | Meaning                                              |
        /// | -------- | ---------------------------------------------------- |
        /// | `␛[K`    | Clear to end of line                                 |
        /// | `␛[0K`   | Clear to end of line                                 |
        /// | `␛[2K`   | Clear entire line                                    |
        line-editing-supported: func() -> bool

        /// Does this terminal support full-screen features?
        ///
        /// These include moving the cursor to arbitrary positions on the
        /// full screen, and clearing all or part of the full screen.
        /// This reflects the functionality commonly used for interactive
        /// terminal user interfaces.
        ///
        /// The full feature is not yet fully defined, however implementations
        /// advertising full-screen support are encouraged to support the
        /// following escape sequences:
        ///
        /// Escape sequences:
        ///
        /// | Sequence    | Meaning                                           |
        /// | ----------- | ------------------------------------------------- |
        /// | `␛[?1049h`  | Enter full-screen mode                            |
        ///
        /// Escape sequences when full-screen mode has been entered:
        ///
        /// | Sequence    | Meaning                                           |
        /// | ----------- | ------------------------------------------------- |
        /// | `␛[«n»A`    | Move the cursor up `«n»` rows                     |
        /// | `␛[«n»B`    | Move the cursor down `«n»` rows                   |
        /// | `␛[«n»C`    | Move the cursor right `«n»` column                |
        /// | `␛[«n»D`    | Move the cursor left `«n»` columns                |
        /// | `␛[«n»G`    | Move the cursor to column `«n»`                   |
        /// | `␛[«row»;«column»H` | Move the cursor to row `«row»` and column `«column»` |
        /// | `␛[0J`      | Clear from the cursor to the end of the screen    |
        /// | `␛[1J`      | Clear the screen from the beginning to the current cursor position |
        /// | `␛[2J`      | Clear the whole screen                            |
        /// | `␛[«n»d`    | Move the cursor to row `«n»`                      |
        /// | `␛[«row»;«column»f` | Move the cursor to row `«row»` and column `«column»` |
        /// | `␛[?25h`    | Set the cursor as visible                         |
        /// | `␛[?1049h`  | Clear the screen and reset full-screen settings to defaults |
        /// | `␛[?2004h`  | Begin bracketed paste mode                        |
        /// | `␛[?25l`    | Set the cursor as invisible                       |
        /// | `␛[?1049l`  | Exit full-screen mode and restore the terminal to its prior state |
        /// | `␛[?2004l`  | End bracketed paste mode                          |
        /// | `␛[!p`      | Reset the terminal to default settings, without clearing the screen |
        full-screen-supported: func() -> bool
    }

    /// Flags indicating support for different sets of color escape
    /// sequences, and the user's preference for whether they should
    /// be used by default.
    ///
    /// Other color features, including 88-color and 256-color are not
    /// included here, as the associated escape sequences are not as
    /// portable, and they're effectively obviated by truecolor support.
    flags color-flags {
        /// Are the classic "4-bit color" escape sequences supported?
        ///
        /// This indicates support for up to 16 colors, on foreground and
        /// background, using the widely-supported (and ECMA-48) "SGR"
        /// color escape sequences of the form `␛[…m`. See
        /// [here] for more information.
        ///
        /// Before using color in your user interface, also consider
        /// checking `color-desired` to obtain the user's preference for
        /// enabling color by default.
        ///
        /// [here]: https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
        ansi,

        /// Are the 24-bit "true color" escape sequences supported?
        ///
        /// This indicates support for up to 16 colors, on foreground and
        /// background, using "true color" escape sequences of the form
        /// `␛[38;2;«r»;«g»;«b»m` (foreground) and `␛[48;2;«r»;«g»;«b»m`
        /// (background). The `«r»`, `«g»`, and `«b»` fields are integers
        /// in the range [0,256) indicating red, green, and blue values
        /// respectively. See /// [here] for more information.
        ///
        /// Before using color in your user interface, also consider
        /// checking `color-desired` to obtain the user's preference for
        /// enabling color by default.
        ///
        /// [here]: https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit
        truecolor,

        /// Does the user with color to be used by default?
        ///
        /// Some users have a terminal which supports color, but prefer
        /// applications not use it by default; this flag indicates
        /// this preference.
        ///
        /// See the [`NO_COLOR` website](http://no-color.org/) for more
        /// information.
        color-desired-by-default,
    }

    /// A pair of rows and columns.
    record rows-and-columns {
        rows: u16,
        columns: u16,
    }
}

/// An interface providing an optional `terminal-input` for stdin as a
/// link-time authority.
interface terminal-stdin {
    use terminal-input.{terminal-input}

    /// If stdin is connected to a terminal, return a `terminal-input` handle
    /// allowing further interaction with it.
    get-terminal-stdin: func() -> option<terminal-input>
}

/// An interface providing an optional `terminal-output` for stdout as a
/// link-time authority.
interface terminal-stdout {
    use terminal-output.{terminal-output}

    /// If stdout is connected to a terminal, return a `terminal-output` handle
    /// allowing further interaction with it.
    get-terminal-stdout: func() -> option<terminal-output>
}

/// An interface providing an optional `terminal-output` for stderr as a
/// link-time authority.
interface terminal-stderr {
    use terminal-output.{terminal-output}

    /// If stderr is connected to a terminal, return a `terminal-output` handle
    /// allowing further interaction with it.
    get-terminal-stderr: func() -> option<terminal-output>
}
